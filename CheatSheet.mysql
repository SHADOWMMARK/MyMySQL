# Write an SQL query to fix the names so that only the first character is uppercase and the rest are lowercase.
SELECT user_id,CONCAT(UPPER(SUBSTR(name,1,1)),LOWER(SUBSTR(name,2,length(name)))) AS name
FROM Users ORDER BY user_id;

# COUNT return counting result int
SELECT sell_date,
        COUNT(DISTINCT(product)) AS num_sold,
        GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR ',') AS products
FROM Activities
GROUP BY sell_date
ORDER BY sell_date ASC    

# since mysql do not have a full join, the code followed working as the full join 
  (SELECT * FROM Employees LEFT JOIN Salaries USING(employee_id)
   UNION 
   SELECT * FROM Employees RIGHT JOIN Salaries USING(employee_id))
   
# UNION ALL is the same
SELECT
    product_id,
    'store1' as store,
    store1 as price
FROM Products
WHERE store1 IS NOT null

UNION ALL

SELECT
    product_id,
    'store2' as store,
    store2 as price
FROM Products
WHERE store2 IS NOT null

#608. Tree Node use the when, then, else 
SELECT id,
    CASE 
        WHEN p_id is NULL THEN 'Root'
        WHEN id IN (SELECT p_id FROM Tree) THEN 'Inner'
        ELSE 'Leaf'
        END AS type
FROM Tree

#176. Second Highest Salary ORDER BY salary DESC means to sort salary as descending 
#LIMIT 1 means this only return 1 raw, offset means do not use the first row
SELECT 
    (SELECT distinct salary FROM Employee ORDER BY salary DESC LIMIT 1 OFFSET 1)
AS SecondHighestSalary

#197. Rising Temperature
select t1.id from weather t1 
inner join weather t2 
where t1.temperature >t2.temperature and datediff(t1.recorddate ,t2.recorddate)=1;

#1084. Sales Analysis III
SELECT p.product_id,p.product_name
FROM Product p JOIN Sales s on p.product_id = s.product_id
GROUP BY p.product_id
HAVING MAX(s.sale_date)<='2019-03-31' and MIN(s.sale_date)>='2019-01-01'
-- the having used here since the WHERE cannot used with max or min or other calculating funcs

-- 1587. Bank Account Summary II
SELECT name, sum(amount ) balance
from Users left join Transactions using (account)
group by account
having balance > 10000

-- It is mostly syntactic sugar, but a couple differences are noteworthy:
-- ON is the more general of the two. One can join tables ON a column, 
-- a set of columns and even a condition. For example:
SELECT * FROM world.City JOIN world.Country ON (City.CountryCode = Country.Code) WHERE ...
-- USING is useful when both tables share a column of the exact same name on which they join.
SELECT ... FROM film JOIN film_actor USING (film_id) WHERE ... 