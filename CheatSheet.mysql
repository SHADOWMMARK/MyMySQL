# Write an SQL query to fix the names so that only the first character is uppercase and the rest are lowercase.
SELECT user_id,CONCAT(UPPER(SUBSTR(name,1,1)),LOWER(SUBSTR(name,2,length(name)))) AS name
FROM Users ORDER BY user_id;

# COUNT return counting result int
SELECT sell_date,
        COUNT(DISTINCT(product)) AS num_sold,
        GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR ',') AS products
FROM Activities
GROUP BY sell_date
ORDER BY sell_date ASC    

# since mysql do not have a full join, the code followed working as the full join 
  (SELECT * FROM Employees LEFT JOIN Salaries USING(employee_id)
   UNION 
   SELECT * FROM Employees RIGHT JOIN Salaries USING(employee_id))
   
# UNION ALL is the same
SELECT
    product_id,
    'store1' as store,
    store1 as price
FROM Products
WHERE store1 IS NOT null

UNION ALL

SELECT
    product_id,
    'store2' as store,
    store2 as price
FROM Products
WHERE store2 IS NOT null

#608. Tree Node use the when, then, else 
SELECT id,
    CASE 
        WHEN p_id is NULL THEN 'Root'
        WHEN id IN (SELECT p_id FROM Tree) THEN 'Inner'
        ELSE 'Leaf'
        END AS type
FROM Tree

#176. Second Highest Salary ORDER BY salary DESC means to sort salary as descending 
#LIMIT 1 means this only return 1 raw, offset means do not use the first row
SELECT 
    (SELECT distinct salary FROM Employee ORDER BY salary DESC LIMIT 1 OFFSET 1)
AS SecondHighestSalary

#197. Rising Temperature
select t1.id from weather t1 
inner join weather t2 
where t1.temperature >t2.temperature and datediff(t1.recorddate ,t2.recorddate)=1;

#1084. Sales Analysis III
SELECT p.product_id,p.product_name
FROM Product p JOIN Sales s on p.product_id = s.product_id
GROUP BY p.product_id
HAVING MAX(s.sale_date)<='2019-03-31' and MIN(s.sale_date)>='2019-01-01'
-- the having used here since the WHERE cannot used with max or min or other calculating funcs

-- 1587. Bank Account Summary II
SELECT name, sum(amount ) balance
from Users left join Transactions using (account)
group by account
having balance > 10000
-- It is mostly syntactic sugar, but a couple differences are noteworthy:
-- ON is the more general of the two. One can join tables ON a column, 
-- a set of columns and even a condition. For example:
SELECT * FROM world.City JOIN world.Country ON (City.CountryCode = Country.Code) WHERE ...
-- USING is useful when both tables share a column of the exact same name on which they join.
SELECT ... FROM film JOIN film_actor USING (film_id) WHERE ... 

-- 1050 Actors and Directors Who Cooperated At Least Three Times
select actor_id, director_id
from ActorDirector
group by actor_id, director_id -- this is because will be ordered by pairs
having count(timestamp)>=3

--!!very important knowledge: The GROUP BY statement is often used with aggregate functions 
-- (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.

-- 1141. User Activity for the Past 30 Days I
SELECT activity_date as day, COUNT(distinct user_id) as active_users
FROM Activity
WHERE activity_date > '2019-06-27' and activity_date <= '2019-07-27'
GROUP BY activity_date;

-- 607. Sales Person
-- using left join
SELECT s.name
FROM SalesPerson s
WHERE s.sales_id  not in 
(
    SELECT o.sales_id FROM Orders o left join Company c
    ON o.com_id = c.com_id
    WHERE c.name = 'RED'
)
group by s.name;
-- use not in instead of left join (idea is making a new table)
 SELECT name FROM SalesPerson 
	 WHERE sales_id NOT IN(
		 SELECT sales_id FROM Orders WHERE com_id IN (
				 SELECT com_id FROM Company WHERE name="RED" )
	 );

-- 586. Customer Placing the Largest Number of Orders
select customer_number from Orders
group by customer_number
ORDER BY count(customer_number) DESC 
LIMIT 1;

-- 511. Game Play Analysis I
-- group by usually used with count,min,max...
-- The GROUP BY statement is often used with aggregate 
-- functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.
select player_id, min(event_date) as first_login
from activity
group by player_id;

-- 1934. Confirmation Rate
(
    SELECT 
        user_id,
        ROUND(COUNT(CASE WHEN action = 'confirmed' THEN 1 END) / COUNT(*), 2) AS confirmation_rate
    FROM Confirmations
    GROUP BY user_id
)
Union
(
    SELECT user_id, 0.00 as confirmation_rate
    from Signups
    where user_id not in (select user_id from Confirmations)
)
-- 1211. Queries Quality and Percentage
SELECT 
    query_name,
    ROUND(AVG(rating/position),2) AS quality,
    ROUND(AVG(CASE WHEN rating <3 THEN 1 ELSE 0 END)*100,2) AS poor_query_percentage
FROM Queries
WHERE query_name is not null
GROUP BY query_name

-- 1174. Immediate Food Delivery II
Select 
    round(avg(order_date = customer_pref_delivery_date)*100, 2) as immediate_percentage
from Delivery
where (customer_id, order_date) in (
  Select customer_id, min(order_date) 
  from Delivery
  group by customer_id
);

-- 596. Classes More Than 5 Students
SELECT class
FROM Courses
GROUP BY class
HAVING COUNT(student)>=5
-- notice that HAVING is behind GROUP BY but WHERE should be aheadThe HAVING clause is used to filter groups of rows from the result set based on specified conditions.
-- It is applied after the GROUP BY clause and any aggregation functions such as COUNT(), SUM(), AVG(), etc.
-- Conditions in the HAVING clause are applied to groups of rows defined by the GROUP BY clause.
-- It is typically used when you need to filter groups based on aggregate functions.

-- 1729. Find Followers Count
SELECT user_id, COUNT(follower_id) AS followers_count
FROM Followers
GROUP BY user_id
ORDER BY user_id

-- 619. Biggest Single Number
SELECT MAX(num) as num
FROM
(
SELECT num
FROM MyNumbers
GROUP BY num
HAVING COUNT(num) = 1
) a

-- 1045. Customers Who Bought All Products:
-- Notice that the Product table having all product's product_key
-- Which means that COUNT(Distinct product_key) from Customer table group by different customer_id is the same as COUNT(product_keyFrom Product table.
SELECT customer_id
FROM Customer
GROUP BY customer_id
HAVING COUNT(DISTINCT product_key) = (
    SELECT COUNT(product_key)
    FROM Product
)
